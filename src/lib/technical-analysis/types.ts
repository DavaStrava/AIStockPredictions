// Core types for technical analysis system
// These interfaces define the data structures used throughout the technical analysis engine

/**
 * Standard OHLCV (Open, High, Low, Close, Volume) price data structure
 * 
 * This is the fundamental data structure for all technical analysis calculations.
 * It represents a single trading period (day, hour, minute, etc.) with complete
 * price and volume information.
 * 
 * @interface PriceData
 */
export interface PriceData {
  /** Trading date/time for this data point */
  date: Date;
  /** Opening price at the start of the trading period */
  open: number;
  /** Highest price reached during the trading period */
  high: number;
  /** Lowest price reached during the trading period */
  low: number;
  /** Closing price at the end of the trading period */
  close: number;
  /** Total volume traded during the period */
  volume: number;
}

/**
 * Base interface for technical indicator results
 * 
 * This provides a common structure for all indicator calculations,
 * ensuring consistency across different technical indicators.
 * 
 * @interface IndicatorResult
 */
export interface IndicatorResult {
  /** Date/time this indicator value corresponds to */
  date: Date;
  /** Calculated indicator value */
  value: number;
  /** Optional trading signal generated from this indicator value */
  signal?: 'buy' | 'sell' | 'hold';
  /** Optional signal strength rating (0 = weakest, 1 = strongest) */
  strength?: number;
}

/**
 * Standardized trading signal structure
 * 
 * This represents a specific trading recommendation generated by a technical
 * indicator, including all necessary information for decision making.
 * 
 * @interface TechnicalSignal
 */
export interface TechnicalSignal {
  /** Name of the indicator that generated this signal */
  indicator: string;
  /** Type of trading signal (buy/sell/hold recommendation) */
  signal: 'buy' | 'sell' | 'hold';
  /** Signal strength/confidence (0 = weakest, 1 = strongest) */
  strength: number;
  /** The indicator value that triggered this signal */
  value: number;
  /** Date/time when this signal was generated */
  timestamp: Date;
  /** Human-readable description explaining the signal */
  description: string;
}

/**
 * RSI (Relative Strength Index) specific result structure
 * 
 * Extends the base IndicatorResult with RSI-specific properties for
 * overbought/oversold conditions and divergence analysis.
 * 
 * @interface RSIResult
 * @extends IndicatorResult
 */
export interface RSIResult extends IndicatorResult {
  /** True if RSI is above the overbought threshold (typically 70) */
  overbought: boolean;
  /** True if RSI is below the oversold threshold (typically 30) */
  oversold: boolean;
  /** Type of price-RSI divergence detected, if any */
  divergence?: 'bullish' | 'bearish' | 'none';
}

/**
 * MACD (Moving Average Convergence Divergence) specific result structure
 * 
 * Contains all three MACD components: main line, signal line, and histogram,
 * plus crossover detection for signal generation.
 * 
 * @interface MACDResult
 */
export interface MACDResult {
  /** Date/time this MACD calculation corresponds to */
  date: Date;
  /** Main MACD line value (Fast EMA - Slow EMA) */
  macd: number;
  /** Signal line value (EMA of MACD line) */
  signal: number;
  /** Histogram value (MACD line - Signal line) */
  histogram: number;
  /** Type of crossover between MACD and signal lines, if any */
  crossover?: 'bullish' | 'bearish' | 'none';
}

/**
 * Bollinger Bands specific result structure
 * 
 * Contains all Bollinger Bands components and derived metrics for
 * volatility analysis and mean reversion trading.
 * 
 * @interface BollingerBandsResult
 */
export interface BollingerBandsResult {
  /** Date/time this calculation corresponds to */
  date: Date;
  /** Upper band value (Middle + Standard Deviation × Multiplier) */
  upper: number;
  /** Middle band value (Simple Moving Average) */
  middle: number;
  /** Lower band value (Middle - Standard Deviation × Multiplier) */
  lower: number;
  /** Band width relative to middle band (volatility measure) */
  bandwidth: number;
  /** Price position within bands (0 = lower band, 1 = upper band) */
  percentB: number;
  /** True if bands are in squeeze formation (low volatility) */
  squeeze: boolean;
}

// Moving Average specific types
export interface MovingAverageResult extends IndicatorResult {
  type: 'SMA' | 'EMA';
  period: number;
}

// Stochastic specific types
export interface StochasticResult {
  date: Date;
  k: number;
  d: number;
  signal: 'buy' | 'sell' | 'hold';
  overbought: boolean;
  oversold: boolean;
}

// Williams %R specific types
export interface WilliamsRResult extends IndicatorResult {
  overbought: boolean;
  oversold: boolean;
}

// ADX specific types
export interface ADXResult {
  date: Date;
  adx: number;
  plusDI: number;
  minusDI: number;
  trend: 'strong' | 'weak' | 'no_trend';
  direction: 'bullish' | 'bearish' | 'neutral';
}

// Volume indicators
export interface OBVResult extends IndicatorResult {
  trend: 'bullish' | 'bearish' | 'neutral';
  divergence?: 'bullish' | 'bearish' | 'none';
}

export interface VolumePriceTrendResult extends IndicatorResult {
  trend: 'bullish' | 'bearish' | 'neutral';
}

export interface AccumulationDistributionResult extends IndicatorResult {
  trend: 'accumulation' | 'distribution' | 'neutral';
  divergence?: 'bullish' | 'bearish' | 'none';
}

// Comprehensive analysis result
export interface TechnicalAnalysisResult {
  symbol: string;
  timestamp: Date;
  signals: TechnicalSignal[];
  indicators: {
    rsi?: RSIResult[];
    macd?: MACDResult[];
    bollingerBands?: BollingerBandsResult[];
    sma?: MovingAverageResult[];
    ema?: MovingAverageResult[];
    stochastic?: StochasticResult[];
    williamsR?: WilliamsRResult[];
    adx?: ADXResult[];
    obv?: OBVResult[];
    volumePriceTrend?: VolumePriceTrendResult[];
    accumulationDistribution?: AccumulationDistributionResult[];
  };
  summary: {
    overall: 'bullish' | 'bearish' | 'neutral';
    strength: number; // 0-1 scale
    confidence: number; // 0-1 scale
    trendDirection: 'up' | 'down' | 'sideways';
    momentum: 'increasing' | 'decreasing' | 'stable';
    volatility: 'low' | 'medium' | 'high';
  };
}

// Configuration types
export interface IndicatorConfig {
  rsi?: {
    period: number;
    overbought: number;
    oversold: number;
  };
  macd?: {
    fastPeriod: number;
    slowPeriod: number;
    signalPeriod: number;
  };
  bollingerBands?: {
    period: number;
    standardDeviations: number;
  };
  movingAverages?: {
    periods: number[];
  };
  stochastic?: {
    kPeriod: number;
    dPeriod: number;
    overbought: number;
    oversold: number;
  };
  williamsR?: {
    period: number;
    overbought: number;
    oversold: number;
  };
  adx?: {
    period: number;
    strongTrend: number;
  };
}

export const DEFAULT_CONFIG: IndicatorConfig = {
  rsi: {
    period: 14,
    overbought: 70,
    oversold: 30,
  },
  macd: {
    fastPeriod: 12,
    slowPeriod: 26,
    signalPeriod: 9,
  },
  bollingerBands: {
    period: 20,
    standardDeviations: 2,
  },
  movingAverages: {
    periods: [20, 50, 200],
  },
  stochastic: {
    kPeriod: 14,
    dPeriod: 3,
    overbought: 80,
    oversold: 20,
  },
  williamsR: {
    period: 14,
    overbought: -20,
    oversold: -80,
  },
  adx: {
    period: 14,
    strongTrend: 25,
  },
};