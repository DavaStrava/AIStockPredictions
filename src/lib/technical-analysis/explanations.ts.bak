import { TechnicalSignal } from './types';

/**
 * Market context interface for contextual explanations
 */
export interface MarketContext {
  condition: 'bull' | 'bear' | 'sideways';
  volatility: 'low' | 'medium' | 'high';
  sector: string;
  marketCap?: 'small' | 'mid' | 'large';
}

/**
 * Individual indicator explanation structure
 */
export interface IndicatorExplanation {
  indicator: string;
  value: number;
  explanation: string;
  actionableInsight: string;
  riskLevel: 'low' | 'medium' | 'high';
  confidence: number;
  timeframe: string;
}

/**
 * Explanation template for different indicator ranges
 */
interface IndicatorTemplate {
  ranges: {
    [key: string]: {
      min: number;
      max: number;
      explanation: string;
      action: string;
      riskLevel: 'low' | 'medium' | 'high';
      timeframe: string;
    };
  };
  contextualFactors: string[];
}

/**
 * RSI explanation templates with market context awareness
 */
const RSI_TEMPLATES: IndicatorTemplate = {
  ranges: {
    oversold: {
      min: 0,
      max: 30,
      explanation: "shows oversold conditions, which historically has led to short-term bounces in this price range. This suggests the stock may have been sold down more than fundamentals justify.",
      action: "This could be a buying opportunity, but confirm with other indicators and monitor for 2-3 trading days to ensure the reversal is sustainable.",
      riskLevel: 'low',
      timeframe: '2-3 trading days'
    },
    neutral: {
      min: 30,
      max: 70,
      explanation: "is in neutral territory, indicating balanced buying and selling pressure. The stock is neither overbought nor oversold at current levels.",
      action: "No immediate action required. Monitor for trend changes above 70 (overbought) or below 30 (oversold) for potential trading opportunities.",
      riskLevel: 'low',
      timeframe: 'ongoing monitoring'
    },
    overbought: {
      min: 70,
      max: 100,
      explanation: "indicates the stock is in overbought territory, suggesting potential selling pressure may emerge soon. This typically occurs when buying momentum has pushed the stock price higher than fundamental value would support.",
      action: "Consider waiting for RSI to drop below 50 before entering a position, or take profits if currently holding. Watch for confirmation from other indicators.",
      riskLevel: 'medium',
      timeframe: '1-2 weeks'
    }
  },
  contextualFactors: ['sector performance', 'market volatility', 'recent earnings', 'market cap considerations']
};

/**
 * MACD explanation templates
 */
const MACD_TEMPLATES: IndicatorTemplate = {
  ranges: {
    bullish: {
      min: -Infinity,
      max: Infinity,
      explanation: "shows a bullish crossover, suggesting upward momentum is building. This occurs when the faster moving average crosses above the slower one, indicating strengthening buying interest.",
      action: "This MACD crossover suggests potential upward momentum - monitor for confirmation over next 2-3 trading days. Consider entering positions if other indicators align.",
      riskLevel: 'medium',
      timeframe: '2-3 trading days'
    },
    bearish: {
      min: -Infinity,
      max: Infinity,
      explanation: "indicates bearish momentum with the signal line crossing below the MACD line. This suggests weakening buying pressure and potential downward price movement ahead.",
      action: "Consider reducing position size or setting stop-loss orders as downward pressure may continue. Wait for bullish crossover before re-entering.",
      riskLevel: 'high',
      timeframe: '1-2 weeks'
    },
    neutral: {
      min: -Infinity,
      max: Infinity,
      explanation: "is showing mixed signals with no clear directional bias at the current price level. The indicator lines are converging without a definitive crossover pattern.",
      action: "Wait for clearer MACD signals before making position changes. Look for decisive crossovers above or below the signal line.",
      riskLevel: 'low',
      timeframe: 'ongoing monitoring'
    }
  },
  contextualFactors: ['trend strength', 'volume confirmation', 'market momentum', 'sector rotation']
};

/**
 * Bollinger Bands explanation templates
 */
const BOLLINGER_BANDS_TEMPLATES: IndicatorTemplate = {
  ranges: {
    lower_band: {
      min: -Infinity,
      max: Infinity,
      explanation: "is approaching or touching the lower Bollinger Band, suggesting the stock may be oversold relative to its recent trading range. This often indicates a potential bounce back toward the middle band.",
      action: "Consider this a potential buying opportunity, especially if supported by other indicators. Target the middle band for profit-taking.",
      riskLevel: 'medium',
      timeframe: '1-2 weeks'
    },
    upper_band: {
      min: -Infinity,
      max: Infinity,
      explanation: "is near or touching the upper Bollinger Band, indicating the stock may be overbought relative to its recent volatility. This suggests potential resistance and possible pullback.",
      action: "Consider taking profits or reducing position size. Watch for a move back toward the middle band before re-entering.",
      riskLevel: 'medium',
      timeframe: '1-2 weeks'
    },
    middle_range: {
      min: -Infinity,
      max: Infinity,
      explanation: "is trading within the middle range of its Bollinger Bands, indicating normal price action relative to recent volatility. No extreme conditions are present.",
      action: "Monitor for moves toward the upper or lower bands for potential trading opportunities. Current levels suggest balanced conditions.",
      riskLevel: 'low',
      timeframe: 'ongoing monitoring'
    }
  },
  contextualFactors: ['volatility regime', 'mean reversion tendency', 'breakout potential', 'volume patterns']
};

/**
 * Stochastic Oscillator explanation templates
 */
const STOCHASTIC_TEMPLATES: IndicatorTemplate = {
  ranges: {
    oversold_bullish: {
      min: 0,
      max: 20,
      explanation: "shows the Stochastic Oscillator in oversold territory with a bullish crossover, where the %K line has crossed above the %D line. This pattern often signals that selling pressure may be exhausted and a price bounce could be imminent.",
      action: "This oversold crossover suggests a potential buying opportunity. Monitor for 1-2 days to confirm the reversal is sustainable before entering a position.",
      riskLevel: 'low',
      timeframe: '1-2 days'
    },
    overbought_bearish: {
      min: 80,
      max: 100,
      explanation: "indicates the Stochastic Oscillator is in overbought territory with a bearish crossover, where the %K line has crossed below the %D line. This suggests buying momentum may be weakening and a pullback could occur.",
      action: "Consider taking profits or reducing position size. This overbought crossover often precedes short-term price declines.",
      riskLevel: 'medium',
      timeframe: '1-2 days'
    },
    neutral: {
      min: 20,
      max: 80,
      explanation: "shows the Stochastic Oscillator in neutral territory, indicating balanced momentum without extreme overbought or oversold conditions.",
      action: "Wait for the oscillator to reach extreme levels (above 80 or below 20) before making trading decisions based on this indicator.",
      riskLevel: 'low',
      timeframe: 'ongoing monitoring'
    }
  },
  contextualFactors: ['trend strength', 'volume confirmation', 'support/resistance levels']
};

/**
 * Williams %R explanation templates
 */
const WILLIAMS_R_TEMPLATES: IndicatorTemplate = {
  ranges: {
    oversold: {
      min: -100,
      max: -80,
      explanation: "shows Williams %R in oversold territory, suggesting the stock has been sold down aggressively and may be due for a bounce. This indicator measures where the current price sits relative to the recent high-low range.",
      action: "This oversold reading suggests a potential buying opportunity, especially if other indicators confirm. Look for the indicator to move above -80 as confirmation of reversal.",
      riskLevel: 'medium',
      timeframe: '3-5 trading days'
    },
    overbought: {
      min: -20,
      max: 0,
      explanation: "indicates Williams %R is in overbought territory, suggesting the stock may have risen too quickly and could face selling pressure. The price is near the top of its recent trading range.",
      action: "Consider waiting for a pullback before entering new positions. If holding, consider taking partial profits or tightening stop-losses.",
      riskLevel: 'medium',
      timeframe: '3-5 trading days'
    },
    neutral: {
      min: -80,
      max: -20,
      explanation: "shows Williams %R in neutral territory, indicating the stock is trading within a normal range relative to recent highs and lows.",
      action: "Monitor for moves into extreme zones (above -20 or below -80) for potential trading signals. Current levels suggest balanced conditions.",
      riskLevel: 'low',
      timeframe: 'ongoing monitoring'
    }
  },
  contextualFactors: ['recent price volatility', 'trend direction', 'support/resistance proximity']
};

/**
 * ADX (Average Directional Index) explanation templates
 */
const ADX_TEMPLATES: IndicatorTemplate = {
  ranges: {
    strong_trend: {
      min: 25,
      max: 100,
      explanation: "shows a strong trend is in place, as indicated by the ADX reading above 25. ADX measures trend strength regardless of direction - the higher the reading, the stronger the trend.",
      action: "Strong trends tend to persist. Consider trend-following strategies and avoid counter-trend trades. Use the +DI and -DI lines to determine trend direction.",
      riskLevel: 'low',
      timeframe: 'ongoing trend'
    },
    weak_trend: {
      min: 20,
      max: 25,
      explanation: "indicates a developing trend with ADX between 20-25. The trend is present but not yet strong enough to be highly reliable for trend-following strategies.",
      action: "Monitor for ADX to strengthen above 25 for better trend-following opportunities. Exercise caution with trend-based strategies until trend strengthens.",
      riskLevel: 'medium',
      timeframe: '1-2 weeks'
    },
    no_trend: {
      min: 0,
      max: 20,
      explanation: "shows weak or no trend with ADX below 20. This suggests the market is range-bound or choppy, making trend-following strategies less effective.",
      action: "Avoid trend-following strategies. Consider range-trading approaches or wait for a clearer trend to develop (ADX above 25).",
      riskLevel: 'high',
      timeframe: 'ongoing monitoring'
    }
  },
  contextualFactors: ['directional indicators (+DI/-DI)', 'price action patterns', 'volume trends']
};

/**
 * OBV (On-Balance Volume) explanation templates
 */
const OBV_TEMPLATES: IndicatorTemplate = {
  ranges: {
    bullish_trend: {
      min: -Infinity,
      max: Infinity,
      explanation: "shows On-Balance Volume trending upward, indicating accumulation and buying pressure. OBV adds volume on up days and subtracts it on down days, so rising OBV suggests smart money is accumulating shares.",
      action: "Rising OBV confirms upward price movement and suggests the trend has strong volume support. This is a positive signal for maintaining or entering long positions.",
      riskLevel: 'low',
      timeframe: 'ongoing trend'
    },
    bearish_trend: {
      min: -Infinity,
      max: Infinity,
      explanation: "indicates On-Balance Volume is trending downward, suggesting distribution and selling pressure. Falling OBV means volume is heavier on down days, indicating smart money may be exiting positions.",
      action: "Declining OBV warns of weakening price support. Consider reducing positions or avoiding new entries until OBV stabilizes or reverses.",
      riskLevel: 'high',
      timeframe: 'ongoing trend'
    },
    divergence: {
      min: -Infinity,
      max: Infinity,
      explanation: "shows a divergence between price and On-Balance Volume. When price and OBV move in opposite directions, it often signals a potential trend reversal ahead.",
      action: "Divergences are important warning signals. If price rises while OBV falls, expect potential weakness. If price falls while OBV rises, watch for potential reversal.",
      riskLevel: 'medium',
      timeframe: '1-3 weeks'
    }
  },
  contextualFactors: ['price trend confirmation', 'volume patterns', 'divergence analysis']
};

/**
 * Moving Average explanation templates
 */
const MOVING_AVERAGE_TEMPLATES: IndicatorTemplate = {
  ranges: {
    golden_cross: {
      min: -Infinity,
      max: Infinity,
      explanation: "shows a bullish 'Golden Cross' pattern where a shorter-term moving average has crossed above a longer-term moving average. This is a classic bullish signal suggesting upward momentum is building.",
      action: "Golden crosses are reliable bullish signals. Consider entering or adding to positions, with stop-losses below the longer-term moving average.",
      riskLevel: 'low',
      timeframe: '2-4 weeks'
    },
    death_cross: {
      min: -Infinity,
      max: Infinity,
      explanation: "indicates a bearish 'Death Cross' pattern where a shorter-term moving average has crossed below a longer-term moving average. This classic bearish signal suggests downward momentum may continue.",
      action: "Death crosses warn of potential extended declines. Consider reducing positions or avoiding new entries until the trend reverses.",
      riskLevel: 'high',
      timeframe: '2-4 weeks'
    },
    above_ma: {
      min: -Infinity,
      max: Infinity,
      explanation: "shows the price trading above its moving average, indicating bullish momentum. Moving averages act as dynamic support levels in uptrends.",
      action: "Price above moving averages is bullish. Consider buying on pullbacks to the moving average, which often provides support.",
      riskLevel: 'low',
      timeframe: 'ongoing trend'
    },
    below_ma: {
      min: -Infinity,
      max: Infinity,
      explanation: "indicates the price is trading below its moving average, suggesting bearish momentum. Moving averages act as dynamic resistance in downtrends.",
      action: "Price below moving averages is bearish. Avoid buying until price reclaims the moving average. Consider selling rallies to the moving average.",
      riskLevel: 'medium',
      timeframe: 'ongoing trend'
    }
  },
  contextualFactors: ['multiple timeframe analysis', 'moving average slope', 'distance from moving average']
};

/**
 * Apply market context to base explanation
 */
function applyMarketContext(
  baseExplanation: string,
  baseAction: string,
  symbol: string,
  marketContext?: MarketContext,
  signalType?: 'buy' | 'sell' | 'hold'
): { explanation: string; action: string } {
  let contextualExplanation = baseExplanation;
  let contextualAction = baseAction;

  if (marketContext) {
    // Add market condition context
    if (marketContext.condition === 'bull') {
      contextualExplanation += " In the current bull market environment, this signal may have increased reliability for upward moves.";
      if (signalType === 'sell') {
        contextualAction += " However, selling in a bull market requires strong confirmation from multiple indicators.";
      }
    } else if (marketContext.condition === 'bear') {
      contextualExplanation += " Given the current bear market conditions, exercise extra caution and consider shorter timeframes.";
      contextualAction += " Bear market conditions suggest using tighter stop-losses.";
      if (signalType === 'buy') {
        contextualAction += " Buying in bear markets is riskier - wait for strong confirmation and consider smaller positions.";
      }
    } else if (marketContext.condition === 'sideways') {
      contextualExplanation += " In the current sideways market, this signal may indicate range-bound trading opportunities.";
      contextualAction += " Range-bound markets favor taking profits at resistance and buying at support levels.";
    }

    // Add volatility context
    if (marketContext.volatility === 'high') {
      contextualAction += " High market volatility suggests using smaller position sizes and wider stop-losses to avoid premature exits.";
    } else if (marketContext.volatility === 'low') {
      contextualAction += " Low volatility environment may lead to more reliable technical signals and tighter stop-losses.";
    }

    // Add sector-specific insights
    if (marketContext.sector && marketContext.sector !== 'unknown' && signalType) {
      const sectorInsight = getSectorInsights(marketContext.sector, signalType);
      if (sectorInsight) {
        contextualExplanation += ` As a ${marketContext.sector} stock, ${sectorInsight}`;
      }
    }

    // Add market cap context with specific guidance
    if (marketContext.marketCap === 'small') {
      contextualAction += " Small-cap stocks tend to be more volatile with wider bid-ask spreads - use limit orders and consider this in position sizing.";
    } else if (marketContext.marketCap === 'mid') {
      contextualAction += " Mid-cap stocks offer a balance of growth potential and stability - monitor for institutional interest.";
    } else if (marketContext.marketCap === 'large') {
      contextualAction += " Large-cap stocks typically show more stable technical patterns and higher liquidity for easier entry/exit.";
    }
  }

  return {
    explanation: contextualExplanation,
    action: contextualAction
  };
}

/**
 * Generate RSI explanation with market context
 */
export function generateRSIExplanation(
  signal: TechnicalSignal,
  symbol: string,
  currentPrice: number,
  marketContext?: MarketContext
): IndicatorExplanation {
  const { value } = signal;
  const template = RSI_TEMPLATES;
  
  let range: string;
  if (value < 30) {
    range = 'oversold';
  } else if (value > 70) {
    range = 'overbought';
  } else {
    range = 'neutral';
  }

  const rangeData = template.ranges[range];
  const baseExplanation = `${symbol}'s RSI of ${value.toFixed(1)} ${rangeData.explanation}`;
  const baseAction = rangeData.action;

  const { explanation, action } = applyMarketContext(baseExplanation, baseAction, symbol, marketContext, signal.signal);

  return {
    indicator: signal.indicator,
    value,
    explanation,
    actionableInsight: action,
    riskLevel: rangeData.riskLevel,
    confidence: signal.strength || 0.7,
    timeframe: rangeData.timeframe
  };
}

/**
 * Generate MACD explanation with market context
 */
export function generateMACDExplanation(
  signal: TechnicalSignal,
  symbol: string,
  currentPrice: number,
  marketContext?: MarketContext
): IndicatorExplanation {
  const { signal: signalType } = signal;
  const template = MACD_TEMPLATES;
  
  let range: string;
  if (signalType === 'buy') {
    range = 'bullish';
  } else if (signalType === 'sell') {
    range = 'bearish';
  } else {
    range = 'neutral';
  }

  const rangeData = template.ranges[range];
  let baseExplanation: string;
  if (range === 'bullish') {
    baseExplanation = `${symbol}'s MACD shows a bullish signal at current price of $${currentPrice}, suggesting upward momentum is building. This bullish crossover occurs when the faster moving average crosses above the slower one, indicating strengthening buying interest.`;
  } else {
    baseExplanation = `${symbol}'s MACD ${rangeData.explanation}`;
  }
  const baseAction = rangeData.action;

  const { explanation, action } = applyMarketContext(baseExplanation, baseAction, symbol, marketContext, signal.signal);

  return {
    indicator: signal.indicator,
    value: signal.value,
    explanation,
    actionableInsight: action,
    riskLevel: rangeData.riskLevel,
    confidence: signal.strength || 0.7,
    timeframe: rangeData.timeframe
  };
}

/**
 * Generate Bollinger Bands explanation with market context
 */
export function generateBollingerBandsExplanation(
  signal: TechnicalSignal,
  symbol: string,
  currentPrice: number,
  marketContext?: MarketContext
): IndicatorExplanation {
  const { signal: signalType } = signal;
  const template = BOLLINGER_BANDS_TEMPLATES;
  
  let range: string;
  if (signalType === 'buy') {
    range = 'lower_band';
  } else if (signalType === 'sell') {
    range = 'upper_band';
  } else {
    range = 'middle_range';
  }

  const rangeData = template.ranges[range];
  const baseExplanation = `${symbol} ${rangeData.explanation}`;
  const baseAction = rangeData.action;

  const { explanation, action } = applyMarketContext(baseExplanation, baseAction, symbol, marketContext);

  return {
    indicator: signal.indicator,
    value: signal.value,
    explanation,
    actionableInsight: action,
    riskLevel: rangeData.riskLevel,
    confidence: signal.strength || 0.6,
    timeframe: rangeData.timeframe
  };
}

/**
 * Generate Stochastic Oscillator explanation with market context
 */
export function generateStochasticExplanation(
  signal: TechnicalSignal,
  symbol: string,
  currentPrice: number,
  marketContext?: MarketContext
): IndicatorExplanation {
  const { value, signal: signalType } = signal;
  const template = STOCHASTIC_TEMPLATES;
  
  let range: string;
  if (signalType === 'buy' && value < 20) {
    range = 'oversold_bullish';
  } else if (signalType === 'sell' && value > 80) {
    range = 'overbought_bearish';
  } else {
    range = 'neutral';
  }

  const rangeData = template.ranges[range];
  const baseExplanation = `${symbol} ${rangeData.explanation}`;
  const baseAction = rangeData.action;

  const { explanation, action } = applyMarketContext(baseExplanation, baseAction, symbol, marketContext);

  return {
    indicator: signal.indicator,
    value,
    explanation,
    actionableInsight: action,
    riskLevel: rangeData.riskLevel,
    confidence: signal.strength || 0.7,
    timeframe: rangeData.timeframe
  };
}

/**
 * Generate Williams %R explanation with market context
 */
export function generateWilliamsRExplanation(
  signal: TechnicalSignal,
  symbol: string,
  currentPrice: number,
  marketContext?: MarketContext
): IndicatorExplanation {
  const { value } = signal;
  const template = WILLIAMS_R_TEMPLATES;
  
  let range: string;
  if (value < -80) {
    range = 'oversold';
  } else if (value > -20) {
    range = 'overbought';
  } else {
    range = 'neutral';
  }

  const rangeData = template.ranges[range];
  const baseExplanation = `${symbol} ${rangeData.explanation}`;
  const baseAction = rangeData.action;

  const { explanation, action } = applyMarketContext(baseExplanation, baseAction, symbol, marketContext);

  return {
    indicator: signal.indicator,
    value,
    explanation,
    actionableInsight: action,
    riskLevel: rangeData.riskLevel,
    confidence: signal.strength || 0.6,
    timeframe: rangeData.timeframe
  };
}

/**
 * Generate ADX explanation with market context
 */
export function generateADXExplanation(
  signal: TechnicalSignal,
  symbol: string,
  currentPrice: number,
  marketContext?: MarketContext
): IndicatorExplanation {
  const { value } = signal;
  const template = ADX_TEMPLATES;
  
  let range: string;
  if (value >= 25) {
    range = 'strong_trend';
  } else if (value >= 20) {
    range = 'weak_trend';
  } else {
    range = 'no_trend';
  }

  const rangeData = template.ranges[range];
  const baseExplanation = `${symbol} ${rangeData.explanation}`;
  const baseAction = rangeData.action;

  const { explanation, action } = applyMarketContext(baseExplanation, baseAction, symbol, marketContext);

  return {
    indicator: signal.indicator,
    value,
    explanation,
    actionableInsight: action,
    riskLevel: rangeData.riskLevel,
    confidence: signal.strength || 0.7,
    timeframe: rangeData.timeframe
  };
}

/**
 * Generate OBV explanation with market context
 */
export function generateOBVExplanation(
  signal: TechnicalSignal,
  symbol: string,
  currentPrice: number,
  marketContext?: MarketContext
): IndicatorExplanation {
  const { signal: signalType } = signal;
  const template = OBV_TEMPLATES;
  
  let range: string;
  if (signal.description.includes('divergence')) {
    range = 'divergence';
  } else if (signalType === 'buy') {
    range = 'bullish_trend';
  } else if (signalType === 'sell') {
    range = 'bearish_trend';
  } else {
    range = 'bullish_trend'; // default
  }

  const rangeData = template.ranges[range];
  const baseExplanation = `${symbol} ${rangeData.explanation}`;
  const baseAction = rangeData.action;

  const { explanation, action } = applyMarketContext(baseExplanation, baseAction, symbol, marketContext);

  return {
    indicator: signal.indicator,
    value: signal.value,
    explanation,
    actionableInsight: action,
    riskLevel: rangeData.riskLevel,
    confidence: signal.strength || 0.6,
    timeframe: rangeData.timeframe
  };
}

/**
 * Generate Moving Average explanation with market context
 */
export function generateMovingAverageExplanation(
  signal: TechnicalSignal,
  symbol: string,
  currentPrice: number,
  marketContext?: MarketContext
): IndicatorExplanation {
  const { signal: signalType, description } = signal;
  const template = MOVING_AVERAGE_TEMPLATES;
  
  let range: string;
  if (description.toLowerCase().includes('golden cross')) {
    range = 'golden_cross';
  } else if (description.toLowerCase().includes('death cross')) {
    range = 'death_cross';
  } else if (signalType === 'buy') {
    range = 'above_ma';
  } else if (signalType === 'sell') {
    range = 'below_ma';
  } else {
    range = 'above_ma'; // default
  }

  const rangeData = template.ranges[range];
  const baseExplanation = `${symbol} ${rangeData.explanation}`;
  const baseAction = rangeData.action;

  const { explanation, action } = applyMarketContext(baseExplanation, baseAction, symbol, marketContext);

  return {
    indicator: signal.indicator,
    value: signal.value,
    explanation,
    actionableInsight: action,
    riskLevel: rangeData.riskLevel,
    confidence: signal.strength || 0.6,
    timeframe: rangeData.timeframe
  };
}

/**
 * Generate fallback explanation for unknown indicators
 */
export function generateFallbackExplanation(
  signal: TechnicalSignal,
  symbol: string,
  currentPrice: number,
  marketContext?: MarketContext
): IndicatorExplanation {
  const baseExplanation = `${signal.indicator} value of ${signal.value.toFixed(2)} for ${symbol} requires additional context for interpretation. This indicator is showing ${signal.signal} conditions based on its current reading.`;
  const baseAction = `Monitor this indicator alongside other technical signals for better decision making. Consider the overall market context when interpreting this signal.`;

  const { explanation, action } = applyMarketContext(baseExplanation, baseAction, symbol, marketContext);

  return {
    indicator: signal.indicator,
    value: signal.value,
    explanation,
    actionableInsight: action,
    riskLevel: 'medium',
    confidence: signal.strength || 0.5,
    timeframe: 'ongoing monitoring'
  };
}

/**
 * Main function to generate contextual explanations for any technical indicator
 */
export function generateTechnicalIndicatorExplanation(
  signal: TechnicalSignal,
  symbol: string,
  currentPrice: number,
  marketContext?: MarketContext
): IndicatorExplanation {
  const indicatorName = signal.indicator.toUpperCase();
  
  switch (indicatorName) {
    case 'RSI':
      return generateRSIExplanation(signal, symbol, currentPrice, marketContext);
    case 'MACD':
      return generateMACDExplanation(signal, symbol, currentPrice, marketContext);
    case 'BOLLINGER_BANDS':
    case 'BOLLINGER BANDS':
      return generateBollingerBandsExplanation(signal, symbol, currentPrice, marketContext);
    case 'STOCHASTIC':
      return generateStochasticExplanation(signal, symbol, currentPrice, marketContext);
    case 'WILLIAMS %R':
    case 'WILLIAMS R':
      return generateWilliamsRExplanation(signal, symbol, currentPrice, marketContext);
    case 'ADX':
      return generateADXExplanation(signal, symbol, currentPrice, marketContext);
    case 'OBV':
      return generateOBVExplanation(signal, symbol, currentPrice, marketContext);
    case 'VPT':
    case 'A/D LINE':
    case 'ACCUMULATION/DISTRIBUTION':
      return generateOBVExplanation(signal, symbol, currentPrice, marketContext); // Similar volume-based logic
    case 'SMA':
    case 'EMA':
    case 'MOVING AVERAGE':
      return generateMovingAverageExplanation(signal, symbol, currentPrice, marketContext);
    default:
      return generateFallbackExplanation(signal, symbol, currentPrice, marketContext);
  }
}

/**
 * Generate explanations for multiple indicators with conflict detection
 */
export function generateMultipleIndicatorExplanations(
  signals: TechnicalSignal[],
  symbol: string,
  currentPrice: number,
  marketContext?: MarketContext
): {
  explanations: IndicatorExplanation[];
  conflicts: string[];
  overallSentiment: 'bullish' | 'bearish' | 'neutral';
} {
  const explanations = signals.map(signal => 
    generateTechnicalIndicatorExplanation(signal, symbol, currentPrice, marketContext)
  );

  // Detect conflicting signals
  const conflicts: string[] = [];
  const buySignals = signals.filter(s => s.signal === 'buy');
  const sellSignals = signals.filter(s => s.signal === 'sell');

  if (buySignals.length > 0 && sellSignals.length > 0) {
    conflicts.push(
      `Mixed signals detected: ${buySignals.map(s => s.indicator).join(', ')} suggest buying, while ${sellSignals.map(s => s.indicator).join(', ')} suggest selling. Consider waiting for clearer consensus or use smaller position sizes.`
    );
  }

  // Determine overall sentiment
  const bullishCount = buySignals.length;
  const bearishCount = sellSignals.length;
  const neutralCount = signals.filter(s => s.signal === 'hold').length;

  let overallSentiment: 'bullish' | 'bearish' | 'neutral';
  if (bullishCount > bearishCount + neutralCount) {
    overallSentiment = 'bullish';
  } else if (bearishCount > bullishCount + neutralCount) {
    overallSentiment = 'bearish';
  } else {
    overallSentiment = 'neutral';
  }

  return {
    explanations,
    conflicts,
    overallSentiment
  };
}

/**
 * Determine market condition from price data
 */
export function determineMarketCondition(
  priceData: Array<{ close: number; date: Date }>
): 'bull' | 'bear' | 'sideways' {
  if (priceData.length < 20) return 'sideways';
  
  // Calculate 20-day and 50-day moving averages
  const recent20 = priceData.slice(-20);
  const recent50 = priceData.slice(-50);
  
  const avg20 = recent20.reduce((sum, d) => sum + d.close, 0) / recent20.length;
  const avg50 = recent50.length >= 50 
    ? recent50.reduce((sum, d) => sum + d.close, 0) / recent50.length 
    : avg20;
  
  const currentPrice = priceData[priceData.length - 1].close;
  
  // Bull market: price above both MAs and 20-day MA above 50-day MA
  if (currentPrice > avg20 && currentPrice > avg50 && avg20 > avg50) {
    return 'bull';
  }
  
  // Bear market: price below both MAs and 20-day MA below 50-day MA
  if (currentPrice < avg20 && currentPrice < avg50 && avg20 < avg50) {
    return 'bear';
  }
  
  // Otherwise sideways
  return 'sideways';
}

/**
 * Calculate volatility from price data
 */
export function calculateVolatility(
  priceData: Array<{ close: number }>
): 'low' | 'medium' | 'high' {
  if (priceData.length < 20) return 'medium';
  
  const recent = priceData.slice(-20);
  const returns = [];
  
  for (let i = 1; i < recent.length; i++) {
    const dailyReturn = (recent[i].close - recent[i - 1].close) / recent[i - 1].close;
    returns.push(dailyReturn);
  }
  
  // Calculate standard deviation
  const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;
  const variance = returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) / returns.length;
  const stdDev = Math.sqrt(variance);
  
  // Annualized volatility (assuming daily data)
  const annualizedVol = stdDev * Math.sqrt(252);
  
  if (annualizedVol < 0.15) return 'low';
  if (annualizedVol > 0.30) return 'high';
  return 'medium';
}

/**
 * Get market context from various data sources
 */
export function inferMarketContext(
  symbol: string,
  sector?: string,
  marketCap?: number,
  priceData?: Array<{ close: number; date: Date }>
): MarketContext {
  const marketCapCategory = marketCap 
    ? marketCap > 10000000000 ? 'large' 
      : marketCap > 2000000000 ? 'mid' 
      : 'small'
    : undefined;

  const condition = priceData && priceData.length >= 20 
    ? determineMarketCondition(priceData)
    : 'sideways';
    
  const volatility = priceData && priceData.length >= 20
    ? calculateVolatility(priceData)
    : 'medium';

  return {
    condition,
    volatility,
    sector: sector || 'unknown',
    marketCap: marketCapCategory
  };
}

/**
 * Get sector-specific insights
 */
export function getSectorInsights(sector: string, signalType: 'buy' | 'sell' | 'hold'): string {
  const sectorInsights: Record<string, { buy: string; sell: string }> = {
    'Technology': {
      buy: 'Tech stocks can show strong momentum during growth phases. Consider the broader tech sector trend and upcoming earnings.',
      sell: 'Tech stocks can be volatile. Consider taking profits during overbought conditions, especially before major product announcements or earnings.'
    },
    'Healthcare': {
      buy: 'Healthcare stocks often show defensive characteristics. This sector can perform well during market uncertainty.',
      sell: 'Healthcare stocks tend to be less volatile. Consider regulatory news and clinical trial results when evaluating signals.'
    },
    'Financial': {
      buy: 'Financial stocks are sensitive to interest rates and economic conditions. Strong signals often align with positive economic data.',
      sell: 'Financial stocks can be cyclical. Monitor interest rate trends and economic indicators alongside technical signals.'
    },
    'Energy': {
      buy: 'Energy stocks are highly correlated with commodity prices. Confirm signals with oil/gas price trends.',
      sell: 'Energy sector volatility can be high. Consider commodity price trends and geopolitical factors.'
    },
    'Consumer': {
      buy: 'Consumer stocks reflect economic health. Strong signals may indicate positive consumer sentiment.',
      sell: 'Consumer discretionary stocks are cyclical. Consider economic indicators and consumer confidence data.'
    },
    'Industrial': {
      buy: 'Industrial stocks benefit from economic expansion. Confirm signals with manufacturing and economic data.',
      sell: 'Industrial stocks are economically sensitive. Monitor supply chain and manufacturing trends.'
    }
  };
  
  // Find matching sector (case-insensitive, partial match)
  const matchedSector = Object.keys(sectorInsights).find(key => 
    sector.toLowerCase().includes(key.toLowerCase()) || key.toLowerCase().includes(sector.toLowerCase())
  );
  
  if (matchedSector && signalType !== 'hold') {
    return sectorInsights[matchedSector][signalType];
  }
  
  return '';
}